#!/bin/sh
#
##
###  _           _       _            _
### (_)___  ___ | | __ _| |_ ___  ___| |_
### | / __|/ _ \| |/ _` | __/ _ \/ __| __|
### | \__ \ (_) | | (_| | ||  __/\__ \ |_
### |_|___/\___/|_|\__,_|\__\___||___/\__|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### isolatest
### arch linux iso
### create bootable device with the latest archiso
### (c) 2019 cytopyge
###
##
#


# usage: isolatest [path_to_target_device]
# path to device is mandatory


# initialization

download_location="$HOME/_download"
target_device=$1

header() {

	clear
	printf "isolatest (c) 2019 cytopyge\n"

}

sudo -k
header
echo
sudo echo ""

# check for requirements

## not a mountpoint
mountpoint -q $target_device
if [ $? -eq 0 ] ; then
	printf "$target_device is a mountpoint\n"
	printf "exiting\n"
	exit
fi

## no valid directory path
if [ -d $target_device ] ; then
	printf "$target_device is a valid path\n"
	printf "exiting\n"
	exit
fi

## internet connection
if [ -z $(ping -q -w 2 -c 1 9.9.9.9 | grep -i unreachable) ]; then
	printf "internet connection detected via $(ip r | grep default | cut -d ' ' -f 3)\n"
else
	printf "no internet connection\n"
	printf "exiting\n"
	exit
fi

echo
printf "requirements check complete\n"
clear


# configuring the mirrorlist

header
sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.old
echo
printf "selecting fastest mirror\n"
sudo reflector --verbose --country 'Netherlands' -l 5 --sort rate --save /etc/pacman.d/mirrorlist

source1=$(grep = /etc/pacman.d/mirrorlist | sed -n 1p | awk -F '= ' '{print $2}' | sed 's/$.*/iso\/latest/')
file1=$(curl -s $source1/sha1sums.txt | grep -o 'archlinux-.*-x86_64.iso')
#[TODO] on error select next mirror of mirrorlist


# download

echo
printf "%27s %s\n" "image version:" "$file1"
printf "%27s %s\n" "downloading from:" "$source1"
printf "%27s %s\n" "copying iso image to:" "$download_location"
printf "%27s %s\n" "extracting iso image to:" "$target_device"
cd $download_location
echo
printf "downloading ...\n"
curl -O "$source1/$file1"


# sha1 checksum verification

## derive sha1 ist
sha1_ist=$(openssl dgst -sha1 $file1 | sed 's/^.*= //')
printf "$sha1_ist" > $file1.sha1_ist

## derive sha1 soll
sha1_soll=$(curl -s $source1/sha1sums.txt | grep $file1 | cut -d ' ' -f 1)

## report to human
echo
printf "iso image checksum comparison:\n"
printf "source soll: $source1\n"
printf "soll sha1: $sha1_soll\n"
printf "ist  sha1: $sha1_ist\n"

## checksum comparison and set status
[ "$sha1_soll" = "$sha1_ist" ] || checksum=0 # no checksum match
[ "$sha1_soll" = "$sha1_ist" ] && checksum=1 # checksum match

if [ $checksum = 0 ]; then
	printf "checksum error!\n"
	printf "delete unvalidated iso image? (y/N) "

	reply

	if printf "$reply" | grep -iq "^y" ; then
		echo
		srm -Ev $download_location/$file1
		printf "unvalidated iso image wiped\n"
		printf "exiting\n"
		exit
	else
		printf "unvalidated iso image in: $download_location"
	fi

	printf "exiting\n"
	exit
elif [ $checksum == 1 ] ; then
	printf "checksum soll is equal to checksum ist\n"
fi


# info and warning
header
echo
## device info for human
lsblk --tree -o name,uuid,fstype,label,size,fsuse%,fsused,path,mountpoint
echo
printf "WARNING! about to \033[1mirreversible overwrite\033[0m $target_device\n"
echo
printf "continue? (y/N) "

reply() {

	# first silently entered character goes directly to $reply
	stty_0=$(stty -g)
	stty raw -echo
	reply=$(head -c 1)
	stty $stty_0

}


reply


if printf "$reply" | grep -iq "^y" ; then
	clear
else
	echo
	printf "aborted by user\n"
	printf "exiting\n"
	exit
fi


# write to usb
echo
printf "extracting $file1 to $target_device\n"
echo
sudo dd if=$download_location/$file1 of=$target_device bs=4M status=progress oflag=sync

echo
printf "process complete!\n"
printf "$file1 available in $download_location\n"
echo

tmp_loc="~/temp_"
mkdir -p $tmp_loc
sudo mount -r --options silent $target_device $tmp_loc

printf "release $(lsblk -no label $target_device | head -n 1):\n"
printf "$(cat $tmp_loc/arch/pkglist.x86_64.txt | grep firmware)\n"
printf "$(cat $tmp_loc/arch/pkglist.x86_64.txt | grep keyring)\n"
printf "$(cat $tmp_loc/arch/pkglist.x86_64.txt | grep "systemd 2")\n"
printf "$(cat $tmp_loc/arch/pkglist.x86_64.txt | grep bash)\n"
printf "$(cat $tmp_loc/arch/pkglist.x86_64.txt | grep "vim 8")\n"

sudo umount $tmp_loc
echo
